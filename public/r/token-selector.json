{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "token-selector",
  "type": "registry:component",
  "title": "a token selector component",
  "description": "a evm multichain token selector",
  "dependencies": [
    "viem",
    "numeral"
  ],
  "devDependencies": [
    "@types/numeral"
  ],
  "registryDependencies": [
    "button",
    "dialog",
    "drawer",
    "command",
    "skeleton"
  ],
  "files": [
    {
      "path": "registry/token-selector/components/token-selector.tsx",
      "content": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport { useMediaQuery } from '../hooks/useMediaQuery';\r\nimport { Token } from '../lib/types/api';\r\nimport { ChainIds } from '../constants/chains';\r\nimport { useEvmTokenBalances } from '../hooks/useEvmTokenBalances';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from '@/components/ui/dialog';\r\nimport {\r\n  Drawer,\r\n  DrawerTrigger,\r\n  DrawerHeader,\r\n  DrawerTitle,\r\n  DrawerContent,\r\n} from '@/components/ui/drawer';\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n} from '@/components/ui/command';\r\nimport { Button } from '@/components/ui/button';\r\nimport { ChainTokenLogo } from './chain-token-logo';\r\nimport { ChevronsUpDown } from 'lucide-react';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { formatNumber, formatTokenAmount, tokenKey } from '../lib/format';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface TokenSelectorProps {\r\n  token?: Token;\r\n  defaultToken?: Token;\r\n  onTokenChange: React.Dispatch<React.SetStateAction<Token | undefined>>;\r\n  name?: string;\r\n  disabled?: boolean;\r\n  required?: boolean;\r\n  form?: string;\r\n  wallet: string;\r\n  chainId?: ChainIds[];\r\n  excludeSpamTokens?: boolean;\r\n  excludeTokens?: string[];\r\n  className?: string;\r\n}\r\n\r\nexport default function TokenSelector(props: TokenSelectorProps) {\r\n  const isDesktop = useMediaQuery('(min-width: 640px)');\r\n  const [open, setOpen] = React.useState<boolean>(false);\r\n\r\n  const { data, isLoading: isBalancesLoading } = useEvmTokenBalances(\r\n    props.wallet,\r\n    {\r\n      excludeSpamTokens: props.excludeSpamTokens,\r\n      chainIds: props.chainId ? props.chainId[0] : undefined,\r\n    }\r\n  );\r\n  const balances = data?.balances;\r\n\r\n  if (isDesktop) {\r\n    return (\r\n      <Dialog open={open} onOpenChange={setOpen}>\r\n        <DialogTrigger asChild>\r\n          <Button\r\n            variant=\"outline\"\r\n            role=\"combobox\"\r\n            aria-expanded={open}\r\n            className=\"w-[200px] justify-between text-xs\"\r\n          >\r\n            <div className=\"inline-flex items-center gap-2\">\r\n              {props.token?.address && <ChainTokenLogo token={props.token} />}\r\n              {props.token ? props.token.symbol : 'Select token...'}\r\n            </div>\r\n            <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\r\n          </Button>\r\n        </DialogTrigger>\r\n\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle className=\"text-sm\">Select a token</DialogTitle>\r\n          </DialogHeader>\r\n\r\n          <TokenSelection\r\n            isBalancesLoading={isBalancesLoading}\r\n            balances={balances}\r\n            selectedToken={props.token}\r\n            onSelectedTokenChange={props.onTokenChange}\r\n            setOpen={setOpen}\r\n          />\r\n        </DialogContent>\r\n      </Dialog>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Drawer open={open} onOpenChange={setOpen}>\r\n      <DrawerTrigger asChild>\r\n        <Button\r\n          variant=\"outline\"\r\n          role=\"combobox\"\r\n          aria-expanded={open}\r\n          className=\"w-[200px] justify-between text-xs\"\r\n        >\r\n          <div className=\"inline-flex items-center gap-2\">\r\n            {props.token?.address && <ChainTokenLogo token={props.token} />}\r\n            {props.token ? props.token.symbol : 'Select token...'}\r\n          </div>\r\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\r\n        </Button>\r\n      </DrawerTrigger>\r\n\r\n      <DrawerContent>\r\n        <DrawerHeader>\r\n          <DrawerTitle className=\"text-sm\">Select a token</DrawerTitle>\r\n        </DrawerHeader>\r\n\r\n        <div className=\"px-4 pb-4\">\r\n          <TokenSelection\r\n            isBalancesLoading={isBalancesLoading}\r\n            balances={balances}\r\n            selectedToken={props.token}\r\n            onSelectedTokenChange={props.onTokenChange}\r\n            setOpen={setOpen}\r\n          />\r\n        </div>\r\n      </DrawerContent>\r\n    </Drawer>\r\n  );\r\n}\r\n\r\nfunction TokenSelection({\r\n  isBalancesLoading,\r\n  balances,\r\n  selectedToken,\r\n  onSelectedTokenChange,\r\n  setOpen,\r\n}: {\r\n  isBalancesLoading: boolean;\r\n  balances: Array<Token> | undefined;\r\n  selectedToken: Token | undefined;\r\n  onSelectedTokenChange: React.Dispatch<\r\n    React.SetStateAction<Token | undefined>\r\n  >;\r\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n}) {\r\n  return (\r\n    <Command\r\n      defaultValue=\"-\" // to avoid default selected item\r\n      className=\"min-h-[340px] max-h-[45svh] bg-transparent border\"\r\n    >\r\n      <CommandInput placeholder=\"Search token...\" className=\"text-xs\" />\r\n      <CommandList>\r\n        {!isBalancesLoading && (\r\n          <CommandEmpty className=\"text-xs text-center py-3\">\r\n            No token found.\r\n          </CommandEmpty>\r\n        )}\r\n\r\n        {isBalancesLoading ? (\r\n          <div className=\"p-2\">\r\n            {Array.from({ length: 7 }).map((_, i) => (\r\n              <div key={i} className=\"flex items-center gap-2 p-2\">\r\n                <Skeleton className=\"h-6 min-w-6 rounded-full\" />\r\n                <div className=\"w-full flex items-center justify-between\">\r\n                  <Skeleton className=\"h-4 w-14\" />\r\n                  <Skeleton className=\"h-4 w-24\" />\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <CommandGroup>\r\n            {balances?.map((token) => {\r\n              const key = tokenKey(token);\r\n              return (\r\n                <TokenListItem\r\n                  key={key}\r\n                  itemKey={key}\r\n                  token={token}\r\n                  selectedToken={selectedToken}\r\n                  setSelectedToken={onSelectedTokenChange}\r\n                  setOpen={setOpen}\r\n                />\r\n              );\r\n            })}\r\n          </CommandGroup>\r\n        )}\r\n      </CommandList>\r\n    </Command>\r\n  );\r\n}\r\n\r\nfunction TokenListItem({\r\n  itemKey,\r\n  selectedToken,\r\n  setSelectedToken,\r\n  token,\r\n  setOpen,\r\n}: {\r\n  itemKey: string;\r\n  selectedToken: Token | undefined;\r\n  setSelectedToken: React.Dispatch<React.SetStateAction<Token | undefined>>;\r\n  token: Token;\r\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n}) {\r\n  const isSelected = selectedToken && tokenKey(selectedToken) === itemKey;\r\n  return (\r\n    <CommandItem\r\n      value={itemKey}\r\n      onSelect={() => {\r\n        setSelectedToken(token);\r\n        setOpen(false);\r\n      }}\r\n      className={cn(\r\n        'flex gap-2 cursor-pointer text-xs border',\r\n        isSelected ? 'border-border bg-secondary' : 'border-transparent'\r\n      )}\r\n    >\r\n      <ChainTokenLogo token={token} />\r\n      {token.symbol}\r\n      <div className=\"ml-auto flex items-center gap-1 font-mono\">\r\n        <span>\r\n          {formatTokenAmount(BigInt(token.amount), token.decimals ?? 18)}\r\n        </span>\r\n        <span className=\"max-w-[5rem] inline-flex items-center\">\r\n          (<p className=\"truncate\">${formatNumber(token.value_usd ?? '-')}</p>)\r\n        </span>\r\n      </div>\r\n    </CommandItem>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/token-selector/components/chain-token-logo.tsx",
      "content": "/* eslint-disable @next/next/no-img-element */\r\nimport { ChainIds, Chains } from '../constants/chains';\r\nimport { getChainImagePath, getTokenLogoURI } from '../lib/logo';\r\nimport { Token } from '../lib/types/api';\r\n\r\nconst ChainTokenLogo = ({ token }: { token: Token }) => {\r\n  return (\r\n    <div className=\"relative dark:bg-neutral-600 bg-neutral-200 flex items-center justify-center rounded-3xl p-0.5\">\r\n      <img\r\n        src={getTokenLogoURI(\r\n          token.address as `0x${string}`,\r\n          token.chain as Chains\r\n        )}\r\n        alt=\"\"\r\n        width={20}\r\n        height={20}\r\n        className=\"inline-block h-5 w-5 rounded-full\"\r\n        onError={(e) => {\r\n          (e.target as HTMLImageElement).onerror = null;\r\n          (e.target as HTMLImageElement).src =\r\n            'https://routernitro.com/images/unknown.png';\r\n        }}\r\n      />\r\n      <img\r\n        src={getChainImagePath(token.chain_id)}\r\n        alt=\"\"\r\n        width={12}\r\n        height={12}\r\n        className=\"absolute -bottom-0.5 -right-0.5 inline-block h-3 w-3 rounded-full\"\r\n        onError={(e) => {\r\n          (e.target as HTMLImageElement).onerror = null;\r\n          (e.target as HTMLImageElement).src =\r\n            'https://routernitro.com/images/unknown.png';\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ChainLogo = ({ chainId }: { chainId: ChainIds }) => {\r\n  return (\r\n    <div className=\"dark:bg-neutral-600 bg-neutral-200 rounded-3xl p-0.5\">\r\n      <img src={getChainImagePath(chainId)} alt=\"\" width={20} height={20} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { ChainLogo, ChainTokenLogo };\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/token-selector/components/dune-provider.tsx",
      "content": "'use client';\r\n\r\nimport * as React from 'react';\r\n\r\ntype DuneContextType = {\r\n  duneApiKey?: string;\r\n  proxyUrl?: string;\r\n};\r\n\r\nconst DuneContext = React.createContext<DuneContextType>({\r\n  duneApiKey: '',\r\n});\r\n\r\nexport const useDuneContext = () => {\r\n  const context = React.useContext(DuneContext);\r\n\r\n  if (!context) {\r\n    throw new Error('useDuneContext must be used within a DuneProvider');\r\n  }\r\n\r\n  return context;\r\n};\r\n\r\nexport const useGetApiKey = () => {\r\n  const context = useDuneContext();\r\n  return context.duneApiKey;\r\n};\r\n\r\nexport const useGetProxyUrl = () => {\r\n  const context = useDuneContext();\r\n  return context.proxyUrl;\r\n};\r\n\r\ntype DuneProviderProps =\r\n  | { duneApiKey: string; proxyUrl?: never; children: React.ReactNode }\r\n  | { duneApiKey?: never; proxyUrl: string; children: React.ReactNode };\r\n\r\nexport const DuneProvider = (props: DuneProviderProps) => {\r\n  const duneApiKey = 'duneApiKey' in props ? props.duneApiKey : undefined;\r\n  const proxyUrl = 'proxyUrl' in props ? props.proxyUrl : undefined;\r\n\r\n  return (\r\n    <DuneContext.Provider value={{ duneApiKey, proxyUrl }}>\r\n      {props.children}\r\n    </DuneContext.Provider>\r\n  );\r\n};\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/token-selector/constants/chains.ts",
      "content": "export const CHAIN_IDS = {\r\n  // evm\r\n  ethereum: '1',\r\n  polygon: '137',\r\n  arbitrum: '42161',\r\n  optimism: '10',\r\n  zksync: '324',\r\n  avalanche: '43114',\r\n  binance: '56',\r\n  polygon_zkevm: '1101',\r\n  manta: '169',\r\n  scroll: '534352',\r\n  mantle: '5000',\r\n  base: '8453',\r\n  linea: '59144',\r\n} as const;\r\n\r\nexport type Chains = keyof typeof CHAIN_IDS;\r\nexport type ChainIds = (typeof CHAIN_IDS)[keyof typeof CHAIN_IDS];\r\n\r\nexport const CHAINS = Object.keys(CHAIN_IDS).reduce((acc, curr) => {\r\n  acc[CHAIN_IDS[curr as keyof typeof CHAIN_IDS]] =\r\n    curr as keyof typeof CHAIN_IDS;\r\n  return acc;\r\n}, {} as Record<ChainIds, keyof typeof CHAIN_IDS>);\r\n\r\nexport const MAINNET_SUPPORTED_CHAINS: Record<string, ChainIds> = {\r\n  ethereum: CHAIN_IDS.ethereum,\r\n  polygon: CHAIN_IDS.polygon,\r\n  arbitrum: CHAIN_IDS.arbitrum,\r\n  optimism: CHAIN_IDS.optimism,\r\n  zksync: CHAIN_IDS.zksync,\r\n  avalanche: CHAIN_IDS.avalanche,\r\n  binance: CHAIN_IDS.binance,\r\n  polygon_zkevm: CHAIN_IDS.polygon_zkevm,\r\n  manta: CHAIN_IDS.manta,\r\n  scroll: CHAIN_IDS.scroll,\r\n  mantle: CHAIN_IDS.mantle,\r\n  base: CHAIN_IDS.base,\r\n  linea: CHAIN_IDS.linea,\r\n};\r\n",
      "type": "registry:file",
      "target": "src/constants/chains.ts"
    },
    {
      "path": "registry/token-selector/hooks/useDeepMemo.ts",
      "content": "// Based on this hook from Apollo:\r\n// https://github.com/apollographql/apollo-client/blob/master/src/react/hooks/utils/useDeepMemo.ts\r\n\r\nimport { useRef } from 'react';\r\n\r\n/**\r\n * Memoize a result using deep equality. This hook has two advantages over\r\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\r\n * that the memo function will only be called if the keys are unequal.\r\n * React.useMemo cannot be relied on to do this, since it is only a performance\r\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\r\n */\r\nexport function useDeepMemo<TKey, TValue>(\r\n  memoFn: () => TValue,\r\n  key: TKey\r\n): TValue {\r\n  const ref = useRef<{ key: TKey; value: TValue }>({ key, value: memoFn() });\r\n\r\n  if (ref.current === undefined || !deepEqual(key, ref.current.key)) {\r\n    ref.current = { key, value: memoFn() };\r\n  }\r\n\r\n  return ref.current.value;\r\n}\r\n\r\n// Custom deep equality function\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction deepEqual(obj1: any, obj2: any): boolean {\r\n  if (obj1 === obj2) return true;\r\n  if (\r\n    typeof obj1 !== 'object' ||\r\n    obj1 === null ||\r\n    typeof obj2 !== 'object' ||\r\n    obj2 === null\r\n  )\r\n    return false;\r\n\r\n  const keys1 = Object.keys(obj1);\r\n  const keys2 = Object.keys(obj2);\r\n\r\n  if (keys1.length !== keys2.length) return false;\r\n\r\n  for (const key of keys1) {\r\n    if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/token-selector/hooks/useEvmTokenBalances.ts",
      "content": "import * as React from 'react';\r\nimport { CHAINS } from '../constants/chains';\r\nimport {\r\n  useGetApiKey,\r\n  useGetProxyUrl,\r\n} from '@/registry/token-selector/components/dune-provider';\r\nimport { useDeepMemo } from '@/registry/token-selector/hooks/useDeepMemo';\r\nimport { fetchEvmBalances } from '@/registry/token-selector/lib/dune-api';\r\nimport { BalanceData, FetchError, TokensParams } from '../lib/types/api';\r\nimport { isAddress } from 'viem';\r\n\r\ntype QueryState = {\r\n  data: BalanceData | null;\r\n  error: FetchError | null;\r\n  isLoading: boolean;\r\n  nextOffset: string | null; // track next_offset\r\n  offsets: string[]; // store offsets for each page\r\n  currentPage: number; // track the current page\r\n};\r\n\r\nexport const useEvmTokenBalances = (\r\n  walletAddress: string,\r\n  params: TokensParams = {}\r\n) => {\r\n  const [state, setState] = React.useState<QueryState>({\r\n    data: null,\r\n    error: null,\r\n    isLoading: false,\r\n    nextOffset: null, // next offset from the API\r\n    offsets: [], // list of offsets corresponding to pages\r\n    currentPage: 0, // start at the first page\r\n  });\r\n\r\n  const memoizedParams = useDeepMemo(() => params, params);\r\n  const apiKey = useGetApiKey();\r\n  const proxyUrl = useGetProxyUrl();\r\n\r\n  // function to fetch data for a specific page\r\n  const fetchDataAsync = async (offset: string | null) => {\r\n    if (!apiKey && !proxyUrl) {\r\n      setState({\r\n        data: null,\r\n        error: new Error('One of duneApiKey or proxyUrl must be provided'),\r\n        isLoading: false,\r\n        nextOffset: null,\r\n        offsets: [],\r\n        currentPage: 0,\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!walletAddress || !isAddress(walletAddress)) return;\r\n\r\n    setState((prevState) => ({ ...prevState, isLoading: true }));\r\n\r\n    try {\r\n      // convert offset to number or undefined\r\n      const updatedParams = {\r\n        ...memoizedParams,\r\n        offset: offset ?? undefined,\r\n      };\r\n\r\n      const result: BalanceData = await fetchEvmBalances(\r\n        walletAddress,\r\n        updatedParams,\r\n        apiKey,\r\n        proxyUrl\r\n      );\r\n\r\n      for (const token of result.balances) {\r\n        if (token.chain === 'avalanche_c') {\r\n          token.chain = CHAINS[token.chain_id];\r\n        }\r\n        if (token.chain === 'zkevm') {\r\n          token.chain = CHAINS[token.chain_id];\r\n        }\r\n      }\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        data: result,\r\n        error: null,\r\n        isLoading: false,\r\n        nextOffset: result.next_offset || null,\r\n        offsets: offset ? [...prevState.offsets, offset] : prevState.offsets,\r\n      }));\r\n    } catch (err) {\r\n      setState({\r\n        data: null,\r\n        error: err as FetchError,\r\n        isLoading: false,\r\n        nextOffset: null,\r\n        offsets: [],\r\n        currentPage: 0,\r\n      });\r\n    }\r\n  };\r\n\r\n  // refetch when walletAddress or params change\r\n  React.useEffect(() => {\r\n    // fetch the first page on initial load or when walletAddress changes\r\n    fetchDataAsync(null);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [walletAddress, memoizedParams, apiKey]);\r\n\r\n  // function to go to the next page\r\n  const nextPage = () => {\r\n    if (state.nextOffset) {\r\n      fetchDataAsync(state.nextOffset); // fetch using the next offset\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        currentPage: prevState.currentPage + 1, // update page number\r\n      }));\r\n    }\r\n  };\r\n\r\n  // function to go to the previous page\r\n  const previousPage = () => {\r\n    if (state.currentPage > 0) {\r\n      // use the offset corresponding to the previous page\r\n      const previousOffset = state.offsets[state.currentPage - 1];\r\n      fetchDataAsync(previousOffset);\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        currentPage: prevState.currentPage - 1,\r\n      }));\r\n    }\r\n  };\r\n\r\n  return {\r\n    ...state,\r\n    nextPage,\r\n    previousPage,\r\n  };\r\n};\r\n\r\n/** @deprecated */\r\nexport const useTokenBalances = useEvmTokenBalances;\r\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/token-selector/hooks/useIsomorphicLayoutEffect.ts",
      "content": "import { useEffect, useLayoutEffect } from 'react';\r\n\r\nexport const useIsomorphicLayoutEffect =\r\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect;\r\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/token-selector/hooks/useMediaQuery.ts",
      "content": "import { useState } from 'react';\r\nimport { useIsomorphicLayoutEffect } from '@/registry/token-selector/hooks/useIsomorphicLayoutEffect';\r\n\r\ntype UseMediaQueryOptions = {\r\n  defaultValue?: boolean;\r\n  initializeWithValue?: boolean;\r\n};\r\n\r\nconst IS_SERVER = typeof window === 'undefined';\r\n\r\nexport function useMediaQuery(\r\n  query: string,\r\n  {\r\n    defaultValue = false,\r\n    initializeWithValue = true,\r\n  }: UseMediaQueryOptions = {}\r\n): boolean {\r\n  const getMatches = (query: string): boolean => {\r\n    if (IS_SERVER) {\r\n      return defaultValue;\r\n    }\r\n    return window.matchMedia(query).matches;\r\n  };\r\n\r\n  const [matches, setMatches] = useState<boolean>(() => {\r\n    if (initializeWithValue) {\r\n      return getMatches(query);\r\n    }\r\n    return defaultValue;\r\n  });\r\n\r\n  // Handles the change event of the media query.\r\n  function handleChange() {\r\n    setMatches(getMatches(query));\r\n  }\r\n\r\n  useIsomorphicLayoutEffect(() => {\r\n    const matchMedia = window.matchMedia(query);\r\n\r\n    // Triggered at the first client-side load and if query changes\r\n    handleChange();\r\n\r\n    // Using deprecated `addListener` and `removeListener` to support Safari < 14 (#135)\r\n    if (matchMedia.addListener) {\r\n      matchMedia.addListener(handleChange);\r\n    } else {\r\n      matchMedia.addEventListener('change', handleChange);\r\n    }\r\n\r\n    return () => {\r\n      if (matchMedia.removeListener) {\r\n        matchMedia.removeListener(handleChange);\r\n      } else {\r\n        matchMedia.removeEventListener('change', handleChange);\r\n      }\r\n    };\r\n  }, [query]);\r\n\r\n  return matches;\r\n}\r\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/token-selector/lib/dune-api.ts",
      "content": "import { removeTrailingSlash } from '@/registry/token-selector/lib/format';\r\nimport {\r\n  BalanceData,\r\n  TokensParams,\r\n  TransactionData,\r\n  TransactionsParams,\r\n} from '../lib/types/api';\r\n\r\nconst BASE_URL = 'https://api.dune.com';\r\nconst BALANCES_PREFIX = 'api/echo/v1/balances/evm';\r\nconst TRANSACTIONS_PREFIX = 'api/echo/v1/transactions/evm';\r\n\r\nconst getBalanceQueryParams = (params: TokensParams): URLSearchParams => {\r\n  const queryParams = new URLSearchParams();\r\n  if (params.allChains) queryParams.append('all_chains', 'true');\r\n  if (params.chainIds) queryParams.append('chain_ids', params.chainIds);\r\n  if (params.excludeSpamTokens)\r\n    queryParams.append('exclude_spam_tokens', 'true');\r\n  if (params.filters) queryParams.append('filters', params.filters);\r\n  if (params.offset) queryParams.append('offset', params.offset.toString());\r\n  if (params.limit) queryParams.append('limit', params.limit.toString());\r\n  if (params.metadata) queryParams.append('metadata', 'logo,url');\r\n  return queryParams;\r\n};\r\n\r\nconst getTransactionsQueryParams = (\r\n  params: TransactionsParams\r\n): URLSearchParams => {\r\n  const queryParams = new URLSearchParams();\r\n  if (params.chainIds) queryParams.append('chain_ids', params.chainIds);\r\n  if (params.offset) queryParams.append('offset', params.offset.toString());\r\n  if (params.limit) queryParams.append('limit', params.limit.toString());\r\n  if (params.method_id) queryParams.append('method_id', params.method_id);\r\n  if (params.to) queryParams.append('to', params.to);\r\n  if (params.decode) queryParams.append('decode', params.decode.toString());\r\n  return queryParams;\r\n};\r\n\r\nconst getHeaders = (duneApiKey: string | undefined) => {\r\n  return duneApiKey\r\n    ? {\r\n        'x-dune-api-key': duneApiKey,\r\n      }\r\n    : undefined;\r\n};\r\n\r\nexport async function fetchEvmBalances(\r\n  walletAddress: string,\r\n  params: TokensParams,\r\n  duneApiKey: string | undefined,\r\n  proxyUrl: string | undefined\r\n): Promise<BalanceData> {\r\n  const queryParams = getBalanceQueryParams(params);\r\n\r\n  if (proxyUrl) {\r\n    proxyUrl = removeTrailingSlash(proxyUrl);\r\n  }\r\n\r\n  const apiUrl = `${\r\n    proxyUrl || BASE_URL\r\n  }/${BALANCES_PREFIX}/${walletAddress}?${queryParams.toString()}`;\r\n\r\n  const response = await fetch(apiUrl, {\r\n    method: 'GET',\r\n    headers: getHeaders(duneApiKey),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`HTTP error! status: ${response.status}`);\r\n  }\r\n\r\n  return response.json();\r\n}\r\n\r\n/** @deprecated */\r\nexport const fetchBalances = fetchEvmBalances;\r\n\r\nexport async function fetchEvmTransactions(\r\n  walletAddress: string,\r\n  params: TransactionsParams,\r\n  duneApiKey: string | undefined,\r\n  proxyUrl: string | undefined\r\n): Promise<TransactionData> {\r\n  const queryParams = getTransactionsQueryParams(params);\r\n  const apiUrl = `${\r\n    proxyUrl || BASE_URL\r\n  }/${TRANSACTIONS_PREFIX}/${walletAddress}?${queryParams.toString()}`;\r\n\r\n  const response = await fetch(apiUrl, {\r\n    method: 'GET',\r\n    headers: getHeaders(duneApiKey),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`HTTP error! status: ${response.status}`);\r\n  }\r\n\r\n  return response.json();\r\n}\r\n\r\n/** @deprecated */\r\nexport const fetchTransactions = fetchEvmTransactions;\r\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/token-selector/lib/format.ts",
      "content": "import numeral from 'numeral';\r\nimport { formatUnits } from 'viem';\r\nimport { Token } from '../lib/types/api';\r\n\r\nexport const formatTokenAmount = (\r\n  _amount: bigint | string,\r\n  _decimals: number = 18\r\n) => {\r\n  if (!_amount) return '0';\r\n  if (typeof _amount === 'string') {\r\n    _amount = BigInt(_amount);\r\n  }\r\n  return formatNumber(formatUnits(_amount, _decimals));\r\n};\r\n\r\nexport const formatNumber = (number: number | string) => {\r\n  if (typeof number === 'string') {\r\n    number = parseFloat(number);\r\n  }\r\n\r\n  if (isNaN(number)) {\r\n    return '-';\r\n  }\r\n\r\n  if (number === 0) {\r\n    return '0';\r\n  }\r\n\r\n  if (number >= 1) {\r\n    if (number > 99999) {\r\n      return numeral(number).format('0.[000]a');\r\n    }\r\n    if (number > 9999) {\r\n      return numeral(number).format('0.[00]a');\r\n    }\r\n    return numeral(number).format('0.[000]a');\r\n  }\r\n  if (number < 0.0001) {\r\n    return '<0.0001';\r\n  }\r\n  if (number < 0.001) {\r\n    return numeral(number).format('0.0[0000]');\r\n  }\r\n  if (number < 1) {\r\n    return numeral(number).format('0.00[00]');\r\n  }\r\n\r\n  return numeral(number).format('0.[00]');\r\n};\r\n\r\nexport const tokenKey = (token: Token) =>\r\n  `${token.chain}:${token.address}:${token.symbol}`;\r\n\r\nexport function removeTrailingSlash(url: string) {\r\n  return url.endsWith('/') ? url.slice(0, -1) : url;\r\n}\r\n\r\nexport function capitalize(word: string) {\r\n  return word.charAt(0).toUpperCase() + word.slice(1);\r\n}\r\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/token-selector/lib/logo.ts",
      "content": "import { Chains, ChainIds } from '../constants/chains';\r\nimport { getAddress } from 'viem';\r\nimport { Token } from '../lib/types/api';\r\n\r\nexport const isTokenNative = (address: string) =>\r\n  address &&\r\n  (address === 'native' ||\r\n    address.toLowerCase() === '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee');\r\n\r\nexport function getChainImagePath(chainId: ChainIds) {\r\n  return `https://assets.relay.link/icons/${chainId}/light.png`;\r\n}\r\n\r\nexport const getTokenLogoURI = (address: `0x${string}`, chain: Chains) => {\r\n  if (!address) return '';\r\n  if (isTokenNative(address))\r\n    if (TRUST_WALLET_EXCEPTIONS[chain])\r\n      return `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/${TRUST_WALLET_EXCEPTIONS[chain]}/info/logo.png`;\r\n    else\r\n      return `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/${chain}/info/logo.png`;\r\n  if (chain === 'linea') return lineaTokenLogoURIs[address];\r\n\r\n  const logoUri =\r\n    'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains';\r\n\r\n  if (TRUST_WALLET_EXCEPTIONS[chain]) {\r\n    return `${logoUri}/${TRUST_WALLET_EXCEPTIONS[chain]}/assets/${getAddress(\r\n      address\r\n    )}/logo.png`;\r\n  }\r\n\r\n  return `${logoUri}/${chain}/assets/${getAddress(address)}/logo.png`;\r\n};\r\n\r\nexport const TRUST_WALLET_EXCEPTIONS: { [key in Chains]?: string } = {\r\n  polygon_zkevm: 'polygonzkevm',\r\n  avalanche: 'avalanchec',\r\n  binance: 'smartchain',\r\n};\r\n\r\nconst lineaTokenLogoURIs: {\r\n  [address: `0x${string}`]: string;\r\n} = {\r\n  '0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f':\r\n    'https://upload.wikimedia.org/wikipedia/commons/6/6f/Ethereum-icon-purple.svg',\r\n  '0x7d43aabc515c356145049227cee54b608342c0ad':\r\n    'https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png',\r\n  '0xf5C6825015280CdfD0b56903F9F8B5A2233476F5':\r\n    'https://s2.coinmarketcap.com/static/img/coins/64x64/1839.png',\r\n  '0x5471ea8f739dd37E9B81Be9c5c77754D8AA953E4':\r\n    'https://s2.coinmarketcap.com/static/img/coins/64x64/5805.png',\r\n  '0x265B25e22bcd7f10a5bD6E6410F10537Cc7567e8':\r\n    'https://s2.coinmarketcap.com/static/img/coins/64x64/3890.png',\r\n  '0x997BF0ebF2a2a2e8189493cedFd19bCDb077c0d0':\r\n    'https://noobysswap.io/assets/images/nbs_logo.png',\r\n  '0x9201f3b9DfAB7C13Cd659ac5695D12D605B5F1e6':\r\n    'https://echodex.io/images/coins/ecp.png',\r\n  '0x0963a1aBAF36Ca88C21032b82e479353126A1C4b':\r\n    'https://raw.githubusercontent.com/LeetSwap/tokenlist/master/logos/leet.png',\r\n  '0x9dd6ea6f9d1fba5ed640651f06802e32ff455221':\r\n    'https://i.ibb.co/NNzQ46L/Lin.png',\r\n  '0x6C6470898882b65E0275723D883A0D877aADe43f':\r\n    'https://cryptologos.cc/logos/tether-usdt-logo.png?v=025',\r\n  '0x66627F389ae46D881773B7131139b2411980E09E':\r\n    'https://cryptologos.cc/logos/usd-coin-usdc-logo.png?v=025',\r\n  '0x60D01EC2D5E98Ac51C8B4cF84DfCCE98D527c747':\r\n    'https://assets.coingecko.com/coins/images/21791/small/izumi-logo-symbol.png?1640053924',\r\n  '0x0B1A02A7309dFbfAD1Cd4adC096582C87e8A3Ac1':\r\n    'https://i.ibb.co/QJjY1Dd/Circle-logo-black.png',\r\n  '0x7f5373AE26c3E8FfC4c77b7255DF7eC1A9aF52a6':\r\n    'https://i.ibb.co/GQKtJb3/uusdt-D-3x.png',\r\n  '0xEB466342C4d449BC9f53A865D5Cb90586f405215':\r\n    'https://i.ibb.co/DRYxg4N/uausdc-L-3x.png',\r\n  '0x176211869cA2b568f2A7D4EE941E073a821EE1ff':\r\n    'https://seeklogo.com/images/U/usd-coin-usdc-logo-CB4C5B1C51-seeklogo.com.png',\r\n  '0x3aAB2285ddcDdaD8edf438C1bAB47e1a9D05a9b4':\r\n    'https://thumbs.dreamstime.com/b/wrapped-bitcoin-wbtc-token-symbol-cryptocurrency-logo-coin-icon-isolated-white-background-wrapped-bitcoin-wbtc-token-symbol-219820880.jpg',\r\n  '0xA219439258ca9da29E9Cc4cE5596924745e12B93':\r\n    'https://cryptologos.cc/logos/tether-usdt-logo.png',\r\n  '0x4AF15ec2A0BD43Db75dd04E62FAA3B8EF36b00d5':\r\n    'https://cryptologos.cc/logos/multi-collateral-dai-dai-logo.png',\r\n  '0x2140Ea50bc3B6Ac3971F9e9Ea93A1442665670e4':\r\n    'https://i.ibb.co/zmGrR16/500-500-px.png',\r\n  '0x13a7F090D46C74acBA98c51786a5c46eD9A474F0':\r\n    'https://i.ibb.co/12Fy3g1/Ava-Scamfari.png',\r\n  '0xB79DD08EA68A908A97220C76d19A6aA9cBDE4376':\r\n    'https://i.ibb.co/khhLbd7/Group-27795.png',\r\n  '0x2f0b4300074afc01726262d4cc9c1d2619d7297a':\r\n    'https://i.ibb.co/w0m0KsN/image-2023-11-15-16-59-48.jpg',\r\n  '0xcc22F6AA610D1b2a0e89EF228079cB3e1831b1D1':\r\n    'https://linea.velocore.xyz/assets/LVC-8ac4b844.svg',\r\n};\r\n\r\nexport const tokenKey = (token: Token) =>\r\n  `${token.chain}:${token.address}:${token.symbol}`;\r\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/token-selector/lib/types/api.ts",
      "content": "import { ChainIds } from '../../constants/chains';\r\n\r\nexport type Token = {\r\n  chain: string;\r\n  chain_id: ChainIds;\r\n  address: string;\r\n  amount: string;\r\n  symbol?: string;\r\n  decimals?: number;\r\n  price_usd?: number;\r\n  value_usd?: number;\r\n};\r\n\r\nexport type BalanceData = {\r\n  request_time: string;\r\n  response_time: string;\r\n  wallet_address: string;\r\n  next_offset?: string | null;\r\n  balances: Token[];\r\n  errors?: {\r\n    token_errors?: {\r\n      address: string;\r\n      chain_id: number;\r\n      description?: string;\r\n    }[];\r\n  };\r\n};\r\n\r\nexport type FetchError = Error & {\r\n  status?: number;\r\n  info?: unknown;\r\n};\r\n\r\nexport type ResponseData = {\r\n  data?: BalanceData;\r\n  error?: FetchError;\r\n  isLoading: boolean;\r\n};\r\n\r\nexport type TokensParams = {\r\n  /** Specify this to get native balances for a long tail of EVM chains, where we don't support ERC20 assets */\r\n  allChains?: boolean;\r\n  /** Comma separated list of chain ids to get balances for */\r\n  chainIds?: string;\r\n  /** Specify this to exclude spam tokens from the response */\r\n  excludeSpamTokens?: boolean;\r\n  /** Specify `erc20` or `native` to get only ERC20 tokens or native assets, respectively */\r\n  filters?: 'erc20' | 'native';\r\n  /** Maximum number of transactions to return */\r\n  limit?: number;\r\n  /** The offset to paginate through result sets. This is a cursor being passed from the previous response, only use what the backend returns here. */\r\n  offset?: string;\r\n  /** A comma separated list of additional metadata fields to include for each token. Supported values: logo, url */\r\n  metadata?: string | null;\r\n};\r\n\r\nexport type TransactionsParams = {\r\n  /** The offset to paginate through result sets. This is a cursor being passed from the previous response, only use what the backend has returned on previous responses. */\r\n  offset?: string | null;\r\n\r\n  /** Maximum number of transactions to return */\r\n  limit?: number | null;\r\n\r\n  /** Return only transactions before this block time */\r\n  block_time?: number | null;\r\n\r\n  /** Comma separated list of chain ids to get transactions for */\r\n  chainIds?: string | null;\r\n\r\n  /** Filter transactions to a given address */\r\n  to?: string | null;\r\n\r\n  /** Return only transactions with this method id */\r\n  method_id?: string | null;\r\n\r\n  /** Return abi decoded transactions and logs */\r\n  decode?: boolean | null;\r\n\r\n  /** Return only transactions with this address in logs */\r\n  log_address?: string | null;\r\n\r\n  /** Return only transactions with this topic0 */\r\n  topic0?: string | null;\r\n\r\n  /** Return only transactions with this block number */\r\n  min_block_number?: number | null;\r\n};\r\n\r\nexport type UseTokensConfig = {\r\n  queryOptions?: {\r\n    refetchOnWindowFocus?: boolean;\r\n    staleTime?: number;\r\n    refetchInterval?: number;\r\n  };\r\n};\r\n\r\nexport type Transaction = {\r\n  address: string;\r\n  block_hash: string;\r\n  block_number: string;\r\n  block_time: string;\r\n  block_version: number;\r\n  chain: string;\r\n  from: string;\r\n  to: string;\r\n  data: string;\r\n  gas_price: string;\r\n  hash: string;\r\n  index: string;\r\n  max_fee_per_gas: string;\r\n  max_priority_fee_per_gas: string;\r\n  nonce: string;\r\n  transaction_type: string;\r\n  value: string;\r\n};\r\n\r\nexport type TransactionData = {\r\n  transactions: Transaction[];\r\n  next_offset?: string | null;\r\n};\r\n",
      "type": "registry:file",
      "target": "src/lib/types/api.ts"
    }
  ]
}